print("‚ñ∂Ô∏è Iniciando o script main.py...") # LINHA NOVA ADICIONADA

import paho.mqtt.client as mqtt
import psycopg2
import os
import time

# --- CONFIGURA√á√ÉO ---
# Preencha com os seus dados

# Configura√ß√µes do Broker MQTT
MQTT_BROKER = "192.168.1.107"  # Endere√ßo do seu broker MQTT (ex: "localhost" ou "192.168.1.10")
MQTT_PORT = 4004           # Porta padr√£o do MQTT
MQTT_TOPIC = "+/dados/Sensor_Luz" # << IMPORTANTE: Coloque aqui o t√≥pico MQTT exato que seu sensor publica

# Configura√ß√µes do Banco de Dados PostgreSQL
DB_HOST = "localhost"
DB_PORT = "5432"
DB_NAME = "sensor_luminosidade" # O nome do seu banco de dados
DB_USER = "postgres"            # Seu usu√°rio do Postgres
DB_PASS = "adminpostgres"       # << IMPORTANTE: Coloque aqui a senha do seu banco de dados

# --- FIM DA CONFIGURA√á√ÉO ---


def conectar_banco():
    """Tenta conectar ao banco de dados PostgreSQL e retorna a conex√£o."""
    try:
        conn = psycopg2.connect(
            host=DB_HOST,
            port=DB_PORT,
            dbname=DB_NAME,
            user=DB_USER,
            password=DB_PASS
        )
        print("‚úÖ Conectado ao banco de dados PostgreSQL com sucesso!")
        return conn
    except psycopg2.OperationalError as e:
        print(f"‚ùå Erro ao conectar ao banco de dados: {e}")
        return None

def inserir_leitura(conn, valor):
    """Insere um novo valor de luminosidade na tabela."""
    # A query SQL para inserir o dado. O %s √© um placeholder para evitar SQL Injection.
    sql = """INSERT INTO leituras_luminosidade (valor) VALUES (%s);"""
    
    cursor = None
    try:
        # Um cursor √© usado para executar comandos no banco de dados
        cursor = conn.cursor()
        # Executa o comando SQL, passando o valor em uma tupla
        cursor.execute(sql, (valor,))
        # Confirma a transa√ß√£o, salvando os dados permanentemente
        conn.commit()
        print(f"‚úîÔ∏è Dado inserido com sucesso: {valor}")
    except (Exception, psycopg2.Error) as error:
        print(f"üî• Erro ao inserir dado: {error}")
        # Desfaz a transa√ß√£o em caso de erro
        if conn:
            conn.rollback()
    finally:
        # Garante que o cursor seja fechado
        if cursor:
            cursor.close()


# --- Fun√ß√µes Callback do MQTT ---

# Adicionamos 'properties=None' para aceitar o 5¬∫ argumento da nova API
def on_connect(client, userdata, flags, rc, properties=None):
    """Esta fun√ß√£o √© chamada quando o cliente se conecta ao broker."""
    if rc == 0:
        print("‚úÖ Conectado ao Broker MQTT!")
        # Inscreve-se no t√≥pico de interesse assim que a conex√£o √© estabelecida
        client.subscribe(MQTT_TOPIC)
        print(f"üëÇ Inscrito no t√≥pico: {MQTT_TOPIC}")
    else:
        print(f"‚ùå Falha na conex√£o com o MQTT, c√≥digo de retorno: {rc}")

def on_message(client, userdata, msg):
    """Esta fun√ß√£o √© chamada toda vez que uma mensagem √© recebida no t√≥pico inscrito."""
    # 'userdata' √© onde armazenamos a conex√£o com o banco
    db_connection = userdata['db_conn']
    
    # O payload da mensagem chega como bytes, ent√£o decodificamos para string
    payload_str = msg.payload.decode('utf-8')
    print(f"üì® Mensagem recebida no t√≥pico '{msg.topic}': {payload_str}")
    
    try:
        # Tenta converter o payload para um n√∫mero (float)
        valor_luminosidade = float(payload_str)
        # Chama a fun√ß√£o para inserir o dado no banco
        inserir_leitura(db_connection, valor_luminosidade)
    except ValueError:
        print(f"‚ö†Ô∏è Ignorando mensagem. Payload n√£o √© um n√∫mero v√°lido: '{payload_str}'")
    except Exception as e:
        print(f"üî• Ocorreu um erro inesperado: {e}")


# --- Bloco Principal de Execu√ß√£o ---
if __name__ == "__main__":
    # 1. Tenta conectar ao banco de dados primeiro
    db_conn = conectar_banco()
    
    # 2. Se a conex√£o com o banco for bem-sucedida, continua para o MQTT
    if db_conn:
        # Cria um cliente MQTT
        # Cria um cliente MQTT usando a API de Callback mais recente
        client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2) # <--- LINHA ALTERADA
        
        # Armazena a conex√£o do banco de dados no 'userdata' do cliente MQTT
        # para que possamos acess√°-la dentro do callback on_message
        client.user_data_set({'db_conn': db_conn})
        
        # Associa as fun√ß√µes de callback
        client.on_connect = on_connect
        client.on_message = on_message

        try:
            # Conecta ao broker MQTT
            client.connect(MQTT_BROKER, MQTT_PORT, 60)
            
            # Inicia o loop para processar as mensagens.
            # loop_forever() bloqueia a execu√ß√£o e mant√©m o script rodando para ouvir o MQTT.
            client.loop_forever()
            
        except ConnectionRefusedError:
            print("‚ùå Erro: Conex√£o com o broker MQTT recusada. Verifique o endere√ßo e a porta.")
        except OSError as e:
            print(f"‚ùå Erro de rede ou de sistema operacional: {e}")
        except KeyboardInterrupt:
            # Permite que o usu√°rio pare o script com Ctrl+C
            print("\nüîå Desconectando...")
        finally:
            # Garante que a conex√£o com o banco de dados seja fechada ao sair
            db_conn.close()
            print("‚úîÔ∏è Conex√£o com o banco de dados fechada.")